Administrative privileges are important 
.bat files 
windows server fundamentals 
_____________________________
not just a scripting environment
it's also a language 
_____________________________
object oriented 
automation and bulk operations 
_____________________________
based on .NET --> good for programmers 
_____________________________
built-in providers 
* interactive shell 
_____________________________
using aliases 
* using other languages 
* Get-ChildItem == dir == ls 
_____________________________
-- command (commandlet) 
* get-service 
    verb-noun 

-- parameter 
* -name
* "*net"
    argument string

OUTPUT
property names - property values 
_____________________________
EXAMPLE
get-service -name "*net*"

Status   Name               DisplayName
------   ----               -----------
Stopped  Netlogon           Netlogon
Stopped  Netman             Network Connections
Running  netprofm           Network List Service
Stopped  NetSetupSvc        Network Setup Service
Stopped  NetTcpPortSharing  Net.Tcp Port Sharing Service
Stopped  SolidWorks Flex... SolidWorks Flexnet Server
Stopped  WMPNetworkSvc      Windows Media Player Network Sharin...
Stopped  XboxNetApiSvc      Xbox Live Networking Service
_____________________________
powerShell is case insensitive 
* some objects and parameters are case sensitive
,ost commandlets are singluar 
_____________________________
Pipe symbol "|"
* output >> next command
* string commands in one line
* parameter binding 
    * like -name and "a string value"
    * gets bounded to the object 
    * pass parameters to the next command 
* can used to output file 
    * get-service | out-file c:\services.txt
_____________________________`
EXAMPLE
C:\Users\moham\Documents\Web\powerShell> get-service | Out-File servicesFile.txt
_____________________________
run vs code as administrator --> ps shell as administrator 
* check if you have administrator privileges 
* [Security.Principal.WindowsIdentity]::GetCurrent().Groups -contains 'S-1-5-32-544'

[Security.Principal.WindowsIdentity]::GetCurrent() - Retrieves the WindowsIdentity for the currently running user.
(...).groups - Access the groups property of the identity to find out what user groups the identity is a member of.
-contains "S-1-5-32-544" returns true if groups contains the Well Known SID of the Administrators group (the identity will only contain it if “run as administrator” was used) and otherwise false.
_____________________________
get-help 
* you can update the help files --> update-help
* get-help get-service 
    getting help for the command get-service 
* get-help get-service -examples
    * you must have an update-help command run before this 
* get-Help Get-Service -Online
    * this opens the webpage 
* get-help get-service -detailed 
    * gives examples 
    * gives more information we can provide 
* get-help get-service -full
    * detailed 
    * gives links to related topics 

Some help can lead to other help files like:
get-help get-childitem -full
leads to: 
get-help about_Aliases
_____________________________
get-command 
* gives commands "on the system"
* you can download more commands 
_____________________________
aliases
* dir == ls == gci == get-childitem
* get-help == gh
* create your own aliases 
* find aliases for a command

Example 
get-help get-childitem -full
* notes section 
    - `Get-ChildItem` can be run using any of the built-in aliases, `ls`, `dir`, and `gci`. For more   information, see about_Aliases
* Get-Help about_Aliases
_____________________________
get-service 
* you can find this accorss servers
* you have 3 parameters / propoerties come back
status name displayname 

EXAMPLE
Get-Service | Where-Object {$_.Status -eq "stopped"}
-- return all services where the status parameter equals stopped 

Get-Service | Get-Member    
* gives back all the properties you can get from the get-service command 
* not just status and name and displayName 
* can give you methods - properties - alias properties (name == serviceName)
* methods are very helpful 
_____________________________


